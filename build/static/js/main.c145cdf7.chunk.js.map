{"version":3,"sources":["socket.js","components/controls.jsx","components/rooms.jsx","components/videochat.jsx","components/chat.jsx","components/RoomInfo.jsx","components/dash.jsx","App.jsx","index.js"],"names":["socket","io","Controls","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","value","target","handleSubmit","preventDefault","state","react_default","a","createElement","className","onSubmit","autoFocus","autofocus","placeholder","onChange","type","onClick","buttonText","Component","Rooms","room","emit","_this2","components_controls","keys","rooms","map","roomid","currentRoomId","changeRoom","key","peerConnectionConfig","iceServers","url","VideoChat","gotUserMedia","stream","localStream","localStreamSRC","URL","createObjectURL","socketId","id","on","gotSignal","connections","objectSpread","streams","connectons","count","clients","console","log","dir","forEach","socketListId","RTCPeerConnection","onicecandidate","event","candidate","JSON","stringify","ice","onaddstream","gotRemoteStream","addStream","connection","createOffer","then","description","setLocalDescription","sdp","localDescription","catch","err","from","message","signal","parse","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","joinTranslation","leaveTranslation","localVideo","React","createRef","navigator","getUserMedia","video","audio","style","position","right","bottom","autoPlay","src","ref","Chat","messagesBlock","current","scrollTop","scrollHeight","time","Date","toTimeString","slice","components_videochat","currentRoom","messages","msg","userName","join","text","normalizeTime","timestamp","RoomInfo","chatUsers","user","translationUsers","Dash","getChatInfo","info","components_rooms","components_chat","name","sendMessage","components_RoomInfo","App","register","registered","userid","username","users","joinRoom","isRegistered","joined","concat","push","components_dash","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"iZAGeA,QAFAC,KC6BAC,qBA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKVQ,aAAe,SAAAC,GACXR,EAAKS,SAAS,CAACC,MAAOF,EAAEG,OAAOD,SAPhBV,EASnBY,aAAe,SAAAJ,GACXA,EAAEK,iBACFb,EAAKD,MAAMa,aAAaZ,EAAKc,MAAMJ,OACnCV,EAAKS,SAAS,CAACC,MAAO,MAVtBV,EAAKc,MAAQ,CACTJ,MAAO,IAHIV,wEAef,OACIe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUhB,KAAKS,cACjBG,EAAAC,EAAAC,cAAA,SAAOG,UAAWjB,KAAKJ,MAAMsB,UAAWC,YAAanB,KAAKJ,MAAMuB,YAAaC,SAAUpB,KAAKI,aAAcG,MAAOP,KAAKW,MAAMJ,MAAOc,KAAK,SACxIT,EAAAC,EAAAC,cAAA,KAAGQ,QAAStB,KAAKS,aAAcM,UAAU,UAAUf,KAAKJ,MAAM2B,qBApB3DC,cCkBRC,oNALXhB,aAAe,SAAAiB,GACXjC,EAAOkC,KAAK,YAAaD,4EAXpB,IAAAE,EAAA5B,KACL,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACe,EAAD,CAAUN,WAAW,OAAOd,aAAcT,KAAKS,aAAcU,YAAY,YACxErB,OAAOgC,KAAK9B,KAAKJ,MAAMmC,OAAOC,IAAI,SAAAC,GAAM,OACrCrB,EAAAC,EAAAC,cAAA,KAAGC,UAAWa,EAAKhC,MAAMsC,eAAiBD,EAAS,SAAW,GAAIX,QAAS,kBAAMM,EAAKhC,MAAMuC,WAAWF,IAASG,IAAKH,GAASA,aAN9HT,cCDda,eAAuB,CACzBC,WAAc,CACV,CAAEC,IAAK,gCACP,CAAEA,IAAK,qCAmIAC,cA9HX,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACf3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAUV6C,aAAe,SAAAC,GACX7C,EAAKS,SAAS,CACVqC,YAAaD,EACbE,eAAgBC,IAAIC,gBAAgBJ,GACpCK,SAAUtD,EAAOuD,KAErBvD,EACKwD,GAAG,SAAUpD,EAAKqD,WAClBD,GAAG,uBAAwB,SAACD,GACzB,GAAIA,GAAMnD,EAAKc,MAAMoC,SAArB,CAOA,IAAII,EAAWrD,OAAAsD,EAAA,EAAAtD,CAAA,GAAQD,EAAKc,MAAMwC,aAC9BE,EAAOvD,OAAAsD,EAAA,EAAAtD,CAAA,GAAQD,EAAKc,MAAM0C,gBACvBF,EAAYH,UACZK,EAAQL,GACfnD,EAAKS,SAAS,CAAE6C,cAAaE,iBAVzBxD,EAAKS,SAAS,CACVgD,WAAY,GACZD,QAAS,OAUpBJ,GAAG,yBAA0B,SAACD,EAAIO,EAAOC,GAoBtC,GAnBAC,QAAQC,WAAWF,EAASD,GAC5BE,QAAQE,IAAIH,GACZA,EAAQI,QAAQ,SAAAC,GACZ,IAAKhE,EAAKc,MAAMwC,YAAYU,GAAe,CACvC,IAAIV,EAAWrD,OAAAsD,EAAA,EAAAtD,CAAA,GAAQD,EAAKc,MAAMwC,aAClCA,EAAYU,GAAgB,IAAIC,kBAAkBzB,GAClDc,EAAYU,GAAcE,eAAiB,SAAAC,GAChB,MAAnBA,EAAMC,YACNR,QAAQC,IAAI,eACZjE,EAAOkC,KAAK,SAAUkC,EAAcK,KAAKC,UAAU,CAAEC,IAAOJ,EAAMC,eAG1Ed,EAAYU,GAAcQ,YAAc,SAAAL,GACpCnE,EAAKyE,gBAAgBN,EAAOH,IAEhCV,EAAYU,GAAcU,UAAU1E,EAAKc,MAAMgC,aAC/C9C,EAAKS,SAAS,CAAE6C,mBAGpBI,GAAS,EAAG,CACZ,IAAIiB,EAAa3E,EAAKc,MAAMwC,YAAYH,GACxCwB,EAAWC,cAAcC,KAAK,SAAAC,GAC1BH,EAAWI,oBAAoBD,GAAaD,KAAK,WAC7CjF,EAAOkC,KAAK,SAAUqB,EAAIkB,KAAKC,UAAU,CAAEU,IAAOL,EAAWM,wBAGhEC,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,SA5D3BnF,EAyEnBqD,UAAY,SAAC+B,EAAMC,GACf,IAAIC,EAASjB,KAAKkB,MAAMF,GACxB,GAAID,GAAQpF,EAAKc,MAAMoC,SAAvB,CACA,IAAIyB,EAAa3E,EAAKc,MAAMwC,YAAY8B,GACpCE,EAAON,KACPL,EAAWa,qBAAqB,IAAIC,sBAAsBH,EAAON,MAC5DH,KAAK,WACqB,SAAnBS,EAAON,IAAIxD,MACXmD,EAAWe,eAAeb,KAAK,SAAAC,GAC3BH,EAAWI,oBAAoBD,GAAaD,KAAK,WAC7CjF,EAAOkC,KAAK,SAAUsD,EAAMf,KAAKC,UAAU,CACvCU,IAAOL,EAAWM,0BAMrCC,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,MAE1ByB,EAAOf,KACPI,EAAWgB,gBAAgB,IAAIC,gBAAgBN,EAAOf,MACjDW,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,QA9Ff7D,EAiGnByE,gBAAkB,SAACN,EAAOhB,GACtB,IAAIK,EAAOvD,OAAAsD,EAAA,EAAAtD,CAAA,GAAQD,EAAKc,MAAM0C,SAC9BA,EAAQL,GAAMH,IAAIC,gBAAgBkB,EAAMtB,QACxC7C,EAAKS,SAAS,CAAE+C,aApGDxD,EAsGnB6F,gBAAkB,WACdjG,EAAOkC,KAAK,mBAAoB9B,EAAKD,MAAM8B,OAvG5B7B,EAyGnB8F,iBAAmB,WACflG,EAAOkC,KAAK,oBAAqB9B,EAAKD,MAAM8B,OAxG5C7B,EAAKc,MAAQ,CACToC,SAAU,GACVJ,YAAa,GACbC,eAAgB,GAChBS,QAAS,GACTF,YAAa,IAEjBtD,EAAK+F,WAAaC,IAAMC,YATTjG,mFAiEfkG,UAAUC,aAAa,CACnBC,OAAO,EACPC,OAAO,GAEPlG,KAAKyC,aACL,SAAAuC,GAAG,OAAIvB,QAAQC,IAAIsB,sCAsClB,IAAApD,EAAA5B,KACL,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOqF,MAAO,CAAEC,SAAU,WAAYC,MAAO,MAAOC,OAAQ,OAASC,UAAU,EAAMC,IAAKxG,KAAKW,MAAMiC,eAAgB6D,IAAKzG,KAAK4F,aAC9H9F,OAAOgC,KAAK9B,KAAKW,MAAM0C,SAASrB,IAAI,SAAAU,GAAM,OACvC9B,EAAAC,EAAAC,cAAA,SAAOyF,UAAU,EAAMnE,IAAKR,EAAKjB,MAAM0C,QAAQX,GAAS8D,IAAK5E,EAAKjB,MAAM0C,QAAQX,QAGxF9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQQ,QAAStB,KAAK0F,iBAAtB,QACA9E,EAAAC,EAAAC,cAAA,UAAQQ,QAAStB,KAAK2F,kBAAtB,kBAxHInE,aCiETkF,cAtEX,SAAAA,EAAY9G,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0G,IACf7G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4G,GAAAvG,KAAAH,KAAMJ,KAMVQ,aAAe,SAAAC,GACXR,EAAKS,SAAS,CAAE4E,QAAS7E,EAAEG,OAAOD,SARnBV,EAUnBY,aAAe,SAAAJ,GACXA,EAAEK,iBACwB,IAAtBb,EAAKc,MAAMuE,UACfzF,EAAOkC,KAAK,UAAW9B,EAAKD,MAAMsC,cAAerC,EAAKc,MAAMuE,SAC5DrF,EAAKS,SAAS,CAAE4E,QAAS,OAZzBrF,EAAKc,MAAQ,CACTuE,QAAS,IAEbrF,EAAK8G,cAAgBd,IAAMC,YALZjG,oFAiBfG,KAAK2G,cAAcC,QAAQC,UAAY7G,KAAK2G,cAAcC,QAAQE,mDAExDC,GAEV,OADa,IAAIC,KAAKD,GACVE,eAAeC,MAAM,EAAG,oCAE/B,IAAAtF,EAAA5B,KACL,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAACqG,EAAD,CAAWzF,KAAM1B,KAAKJ,MAAMsC,iBAEhCtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWC,SAAUhB,KAAKS,cACtCG,EAAAC,EAAAC,cAAA,SAAOG,WAAW,EAAME,YAAY,qBAAqBC,SAAUpB,KAAKI,aAAcG,MAAOP,KAAKW,MAAMuE,QAAS7D,KAAK,UAE1HT,EAAAC,EAAAC,cAAA,OAAK2F,IAAKzG,KAAK2G,cAAe5F,UAAU,YACnCf,KAAKJ,MAAMwH,YAAYC,SAASrF,IAAI,SAACsF,EAAKlF,GAAN,OACjCxB,EAAAC,EAAAC,cAAA,OACIC,UAAW,CAAC,UACI,GAAZuG,EAAIrC,KAAY,mBAAqB,GAEjCqC,EAAIrC,MAAQrD,EAAKhC,MAAM2H,SAAW,gBAAkB,IACrDC,KAAK,KAAMpF,IAAKA,GACvBxB,EAAAC,EAAAC,cAAA,WACKwG,EAAIrC,KACDqC,EAAIrC,MAAQrD,EAAKhC,MAAM2H,SACnB3G,EAAAC,EAAAC,cAAA,YAAOwG,EAAIpC,QAAQuC,MAEf7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVuG,EAAIrC,MAETrE,EAAAC,EAAAC,cAAA,WACKwG,EAAIpC,QAAQuC,OAI7BH,EAAIpC,QAAQuC,MAEpB7G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,YACKc,EAAK8F,cAAcJ,EAAIpC,QAAQyC,yBA3DjDnG,mBCgBJoG,MAnBf,SAAkBhI,GACd,OACIgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,wBACClB,EAAMiI,UAAU7F,IAAI,SAAA8F,GAAI,OACrBlH,EAAAC,EAAAC,cAAA,KAAGsB,IAAK0F,GAAOA,MAGvBlH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,+BACClB,EAAMmI,iBAAiB/F,IAAI,SAAA8F,GAAI,OAC5BlH,EAAAC,EAAAC,cAAA,KAAGsB,IAAK0F,GAAOA,QCsCpBE,cA5CX,SAAAA,EAAYpI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgI,IACfnI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkI,GAAA7H,KAAAH,KAAMJ,KAOVuC,WAAa,SAAAF,GACLA,GAAUpC,EAAKc,MAAMuB,gBACzBrC,EAAKS,SAAS,CAAC4B,cAAcD,IAC7BpC,EAAKoI,gBAXUpI,EA8BnBoI,YAAc,WACVxI,EAAOkC,KAAK,gBAAiB9B,EAAKc,MAAMuB,gBA7BxCrC,EAAKc,MAAQ,CACTuB,cAAetC,EAAMkI,KAAK9E,GAC1B6E,UAAW,GACXE,iBAAkB,IALPlI,mFAaC,IAAA+B,EAAA5B,KAChBP,EACCwD,GAAG,SAAU,SAAAhB,GACVL,EAAKtB,SAAS,CAAC4B,cAAeD,IAC9BL,EAAKqG,gBAERhF,GAAG,YAAa,SAAAiF,GACbzE,QAAQC,IAAI,iBACZD,QAAQE,IAAIuE,GACZtG,EAAKtB,SAAS,CAAEuH,UAAWK,EAAKL,UAAWE,iBAAkBG,EAAKH,qBAErE9E,GAAG,yBAA0BjD,KAAKiI,aAClChF,GAAG,uBAAwBjD,KAAKiI,aAChChF,GAAG,cAAejD,KAAKiI,aACvBhF,GAAG,YAAajD,KAAKiI,aACtBjI,KAAKiI,+CAML,OACIrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACqH,EAAD,CAAOhG,WAAYnC,KAAKmC,WAAYJ,MAAO/B,KAAKJ,MAAMkI,KAAK/F,MAAOG,cAAelC,KAAKW,MAAMuB,gBAC5FtB,EAAAC,EAAAC,cAACsH,EAAD,CAAMb,SAAUvH,KAAKJ,MAAMkI,KAAKO,KAAMC,YAAatI,KAAKsI,YAAapG,cAAelC,KAAKW,MAAMuB,cAAekF,YAAapH,KAAKJ,MAAMkI,KAAK/F,MAAM/B,KAAKW,MAAMuB,iBAC5JtB,EAAAC,EAAAC,cAACyH,EAAD,CAAUV,UAAW7H,KAAKW,MAAMkH,UAAWE,iBAAkB/H,KAAKW,MAAMoH,2BAvCrEvG,aC6EJgH,cA/Db,SAAAA,EAAY5I,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwI,IACjB3I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0I,GAAArI,KAAAH,KAAMJ,KAUR6I,SAAW,SAAAJ,GACT5I,EAAOkC,KAAK,WAAY0G,IAZPxI,EAcnB6I,WAAa,SAACC,EAAQC,GACpB,IAAId,EAAIhI,OAAAsD,EAAA,EAAAtD,CAAA,GAAOD,EAAKc,MAAMmH,MAC1BA,EAAK9E,GAAK2F,EACVb,EAAKO,KAAOO,EACZd,EAAK/F,MAAM4G,GAAU,CACnBE,MAAO,GACPxB,SAAU,IAEZxH,EAAKiJ,SAASH,GACd9I,EAAKS,SAAS,CAACwH,OAAMiB,cAAc,KAvBlBlJ,EAyBnBiJ,SAAW,SAAApH,GACTjC,EAAOkC,KAAK,YAAaD,IA1BR7B,EA4BnBmJ,OAAS,SAACtH,EAAMiH,GACdlF,QAAQC,IAAR,YAAAuF,OAAwBvH,IACxB,IAAIoG,EAAIhI,OAAAsD,EAAA,EAAAtD,CAAA,GACHD,EAAKc,MAAMmH,MAEXA,EAAK/F,MAAML,KAAOoG,EAAK/F,MAAML,GAAQ,CACxCmH,MAAO,GACPxB,SAAU,KAEZS,EAAK/F,MAAML,GAAMmH,MAAMK,KAAKP,GAC5BlF,QAAQE,IAAImE,GACZjI,EAAKS,SAAS,CAACwH,UAvCEjI,EAyCnBqF,QAAU,SAACxD,EAAMuD,EAAMC,GACrBzB,QAAQE,IAAIuB,GACZ,IAAI4C,EAAIhI,OAAAsD,EAAA,EAAAtD,CAAA,GACHD,EAAKc,MAAMmH,MAEhBA,EAAK/F,MAAML,GAAM2F,SAAS6B,KAAK,CAC7BjE,OACAC,YAEFrF,EAAKS,SAAS,CACZwH,UAjDFjI,EAAKc,MAAQ,CACXoI,cAAc,EACdjB,KAAM,CACJO,KAAM,GACNtG,MAAO,GACPiB,GAAI,KAPSnD,wEAXjB,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,IACEf,KAAKW,MAAMoI,aACRnI,EAAAC,EAAAC,cAACqI,EAAD,CAAMrB,KAAM9H,KAAKW,MAAMmH,OACvBlH,EAAAC,EAAAC,cAACe,EAAD,CAAUX,WAAW,EACpBC,YAAY,WACZI,WAAW,QACXd,aAAcT,KAAKyI,WANzB,kEAiEFhJ,EACGwD,GAAG,UAAWjD,KAAKkF,SACnBjC,GAAG,aAAcjD,KAAK0I,YACtBzF,GAAG,cAAejD,KAAKgJ,QACvB/F,GAAG,QAAS,SAAA+B,GAAG,OAAIvB,QAAQC,IAAIsB,YAxEpBxD,aCHlB4H,IAASC,OAAOzI,EAAAC,EAAAC,cAACwI,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c145cdf7.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\nconst socket = io()\r\n\r\nexport default socket","import React, { Component } from 'react'\r\nimport './controls.scss'\r\n\r\nclass Controls extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: ''\r\n        }\r\n    }\r\n    handleChange = e => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault()\r\n        this.props.handleSubmit(this.state.value)\r\n        this.setState({value: ''})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Controls\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input autoFocus={this.props.autofocus} placeholder={this.props.placeholder} onChange={this.handleChange} value={this.state.value} type=\"text\"/>\r\n                    <a onClick={this.handleSubmit} className=\"button\">{this.props.buttonText}</a>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controls","import React, { Component } from 'react'\r\nimport Controls from './controls'\r\nimport socket from '../socket.js'\r\nimport './rooms.scss'\r\n\r\nclass Rooms extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Rooms\">\r\n                <Controls buttonText=\"Join\" handleSubmit={this.handleSubmit} placeholder=\"Room id\" />\r\n                {Object.keys(this.props.rooms).map(roomid => (\r\n                    <p className={this.props.currentRoomId == roomid ? 'active' : ''} onClick={() => this.props.changeRoom(roomid)} key={roomid}>{roomid}</p>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n    handleSubmit = room => {\r\n        socket.emit('join-room', room)\r\n    }\r\n}\r\n\r\nexport default Rooms","import React, { Component } from 'react'\r\nimport socket from '../socket';\r\nimport './videochat.scss'\r\n\r\nconst peerConnectionConfig = {\r\n    'iceServers': [\r\n        { url: 'stun:stun.l.google.com:19302' },\r\n        { url: 'stun:stun.services.mozilla.com' },\r\n    ]\r\n}\r\n\r\nclass VideoChat extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            socketId: '',\r\n            localStream: {},\r\n            localStreamSRC: '',\r\n            streams: [],\r\n            connections: []\r\n        }\r\n        this.localVideo = React.createRef()\r\n    }\r\n    gotUserMedia = stream => {\r\n        this.setState({\r\n            localStream: stream,\r\n            localStreamSRC: URL.createObjectURL(stream),\r\n            socketId: socket.id\r\n        })\r\n        socket\r\n            .on('signal', this.gotSignal)\r\n            .on('user-leftTranslation', (id) => {\r\n                if (id == this.state.socketId) {\r\n                    this.setState({\r\n                        connectons: {},\r\n                        streams: {}\r\n                    })\r\n                    return;\r\n                }\r\n                let connections = { ...this.state.connections }\r\n                let streams = { ...this.state.streams }\r\n                delete connections[id]\r\n                delete streams[id]\r\n                this.setState({ connections, streams })\r\n            })\r\n            .on('user-joinedTranslation', (id, count, clients) => {\r\n                console.log(typeof clients, count)\r\n                console.dir(clients)\r\n                clients.forEach(socketListId => {\r\n                    if (!this.state.connections[socketListId]) {\r\n                        let connections = { ...this.state.connections }\r\n                        connections[socketListId] = new RTCPeerConnection(peerConnectionConfig)\r\n                        connections[socketListId].onicecandidate = event => {\r\n                            if (event.candidate != null) {\r\n                                console.log('sending ice')\r\n                                socket.emit('signal', socketListId, JSON.stringify({ 'ice': event.candidate }))\r\n                            }\r\n                        }\r\n                        connections[socketListId].onaddstream = event => {\r\n                            this.gotRemoteStream(event, socketListId)\r\n                        }\r\n                        connections[socketListId].addStream(this.state.localStream)\r\n                        this.setState({ connections })\r\n                    }\r\n                })\r\n                if (count >= 2) {\r\n                    let connection = this.state.connections[id]\r\n                    connection.createOffer().then(description => {\r\n                        connection.setLocalDescription(description).then(() => {\r\n                            socket.emit('signal', id, JSON.stringify({ 'sdp': connection.localDescription }))\r\n                        })\r\n                    })\r\n                        .catch(err => console.log(err))\r\n                }\r\n            })\r\n    }\r\n    componentDidMount() {\r\n        navigator.getUserMedia({\r\n            video: true,\r\n            audio: true\r\n        },\r\n            this.gotUserMedia,\r\n            err => console.log(err)\r\n        )\r\n    }\r\n    gotSignal = (from, message) => {\r\n        let signal = JSON.parse(message)\r\n        if (from == this.state.socketId) return\r\n        let connection = this.state.connections[from]\r\n        if (signal.sdp) {\r\n            connection.setRemoteDescription(new RTCSessionDescription(signal.sdp))\r\n                .then(() => {\r\n                    if (signal.sdp.type == 'offer') {\r\n                        connection.createAnswer().then(description => {\r\n                            connection.setLocalDescription(description).then(() => {\r\n                                socket.emit('signal', from, JSON.stringify({\r\n                                    'sdp': connection.localDescription\r\n                                }))\r\n                            })\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => console.log)\r\n        }\r\n        if (signal.ice) {\r\n            connection.addIceCandidate(new RTCIceCandidate(signal.ice))\r\n                .catch(err => console.log)\r\n        }\r\n    }\r\n    gotRemoteStream = (event, id) => {\r\n        let streams = { ...this.state.streams }\r\n        streams[id] = URL.createObjectURL(event.stream)\r\n        this.setState({ streams })\r\n    }\r\n    joinTranslation = () => {\r\n        socket.emit('join-translation', this.props.room)\r\n    }\r\n    leaveTranslation = () => {\r\n        socket.emit('leave-translation', this.props.room)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"VideoChat\">\r\n                <div className=\"videos\">\r\n                    <video style={{ position: 'absolute', right: '0px', bottom: '0px' }} autoPlay={true} src={this.state.localStreamSRC} ref={this.localVideo}></video>\r\n                    {Object.keys(this.state.streams).map(stream => (\r\n                        <video autoPlay={true} key={this.state.streams[stream]} src={this.state.streams[stream]} />\r\n                    ))}\r\n                </div>\r\n                <div className=\"control-panel\">\r\n                    <button onClick={this.joinTranslation}>Join</button>\r\n                    <button onClick={this.leaveTranslation}>Leave</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoChat","import React, { Component } from 'react'\r\nimport './chat.scss'\r\nimport VideoChat from './videochat'\r\nimport socket from '../socket'\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.messagesBlock = React.createRef()\r\n    }\r\n    handleChange = e => {\r\n        this.setState({ message: e.target.value })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (this.state.message == '') return\r\n        socket.emit('message', this.props.currentRoomId, this.state.message)\r\n        this.setState({ message: '' })\r\n    }\r\n    componentDidUpdate() {\r\n        this.messagesBlock.current.scrollTop = this.messagesBlock.current.scrollHeight;\r\n    }\r\n    normalizeTime(time) {\r\n        const data = new Date(time)\r\n        return data.toTimeString().slice(0, 9)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Chat\">\r\n                <div className=\"videochat-wrapper\">\r\n                    <VideoChat room={this.props.currentRoomId} />\r\n                </div>\r\n                <form className=\"controls\" onSubmit={this.handleSubmit}>\r\n                    <input autoFocus={true} placeholder=\"Write a message...\" onChange={this.handleChange} value={this.state.message} type=\"text\" />\r\n                </form>\r\n                <div ref={this.messagesBlock} className=\"messages\">\r\n                    {this.props.currentRoom.messages.map((msg, key) => (\r\n                        <div\r\n                            className={[\"message\", (\r\n                                msg.from == 0 ? 'message__service' : ''\r\n                            ), (\r\n                                    msg.from == this.props.userName ? 'message__self' : ''\r\n                                )].join(' ')} key={key}>\r\n                            <div>\r\n                                {msg.from ? (\r\n                                    msg.from == this.props.userName ? (\r\n                                        <span>{msg.message.text}</span>\r\n                                    ) : (\r\n                                            <div>\r\n                                                <div className=\"message_from\">\r\n                                                    {msg.from}\r\n                                                </div>\r\n                                                <div>\r\n                                                    {msg.message.text}\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                ) : msg.message.text}\r\n                            </div>\r\n                            <div className=\"timestamp\">\r\n                                <span>\r\n                                    {this.normalizeTime(msg.message.timestamp)}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat","import React from 'react'\r\n\r\nfunction RoomInfo(props) {\r\n    return (\r\n        <div className=\"RoomInfo\">\r\n            <div className=\"chatInfo\">\r\n                <h1>Chat users</h1>\r\n                {props.chatUsers.map(user => (\r\n                    <p key={user}>{user}</p>\r\n                ))}\r\n            </div>\r\n            <div className=\"translationInfo\">\r\n                <h1>Translation users</h1>\r\n                {props.translationUsers.map(user => (\r\n                    <p key={user}>{user}</p>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomInfo","import React, {Component} from 'react'\r\nimport Rooms from './rooms'\r\nimport Chat from './chat'\r\nimport './dash.scss'\r\nimport socket from '../socket'\r\nimport RoomInfo from './RoomInfo'\r\n\r\nclass Dash extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentRoomId: props.user.id,\r\n            chatUsers: [],\r\n            translationUsers: []\r\n        }\r\n    }\r\n    changeRoom = roomid => {\r\n        if (roomid == this.state.currentRoomId) return;\r\n        this.setState({currentRoomId:roomid})\r\n        this.getChatInfo()\r\n    }\r\n    componentDidMount() {\r\n        socket\r\n        .on('joined', roomid => {\r\n            this.setState({currentRoomId: roomid})\r\n            this.getChatInfo()\r\n        })\r\n        .on('chat-info', info => {\r\n            console.log('Got chat info')\r\n            console.dir(info)\r\n            this.setState({ chatUsers: info.chatUsers, translationUsers: info.translationUsers })\r\n        })\r\n        .on('user-joinedTranslation', this.getChatInfo)\r\n        .on('user-leftTranslation', this.getChatInfo)\r\n        .on('user-joined', this.getChatInfo)\r\n        .on('user-left', this.getChatInfo)\r\n        this.getChatInfo()\r\n    }\r\n    getChatInfo = () => {\r\n        socket.emit('get-chat-info', this.state.currentRoomId)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Dash\">\r\n                <Rooms changeRoom={this.changeRoom} rooms={this.props.user.rooms} currentRoomId={this.state.currentRoomId}/>\r\n                <Chat userName={this.props.user.name} sendMessage={this.sendMessage} currentRoomId={this.state.currentRoomId} currentRoom={this.props.user.rooms[this.state.currentRoomId]}/>\r\n                <RoomInfo chatUsers={this.state.chatUsers} translationUsers={this.state.translationUsers}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dash;","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport socket from './socket.js';\nimport Dash from './components/dash'\nimport Controls from './components/controls'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" > {\n        this.state.isRegistered ?\n          (<Dash user={this.state.user}/>) :\n          (<Controls autofocus={true}\n            placeholder=\"Username\"\n            buttonText=\"Login\"\n            handleSubmit={this.register}\n          />)\n      } </div>)\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      isRegistered: false,\n      user: {\n        name: '',\n        rooms: {},\n        id: ''\n      }\n    }\n  }\n  register = name => {\n    socket.emit('register', name)\n  }\n  registered = (userid, username) => {\n    let user = {...this.state.user}\n    user.id = userid\n    user.name = username\n    user.rooms[userid] = {\n      users: [],\n      messages: []\n    }\n    this.joinRoom(userid)\n    this.setState({user, isRegistered: true})\n  }\n  joinRoom = room => {\n    socket.emit('join-room', room)\n  }\n  joined = (room, userid) => {\n    console.log(`I joined ${room}`)\n    let user = {\n      ...this.state.user\n    }\n    if (!user.rooms[room]) user.rooms[room] = {\n      users: [],\n      messages: []\n    }\n    user.rooms[room].users.push(userid)\n    console.dir(user)\n    this.setState({user})\n  }\n  message = (room, from, message) => {\n    console.dir(message)\n    let user = {\n      ...this.state.user\n    }\n    user.rooms[room].messages.push({\n      from,\n      message\n    })\n    this.setState({\n      user\n    })\n  }\n  componentDidMount() {\n    socket\n      .on('message', this.message)\n      .on('registered', this.registered)\n      .on('user-joined', this.joined)\n      .on('error', err => console.log(err))\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}